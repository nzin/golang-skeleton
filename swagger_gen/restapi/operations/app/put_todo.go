// Code generated by go-swagger; DO NOT EDIT.

package app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutTodoHandlerFunc turns a function with the right signature into a put todo handler
type PutTodoHandlerFunc func(PutTodoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutTodoHandlerFunc) Handle(params PutTodoParams) middleware.Responder {
	return fn(params)
}

// PutTodoHandler interface for that can handle valid put todo params
type PutTodoHandler interface {
	Handle(PutTodoParams) middleware.Responder
}

// NewPutTodo creates a new http.Handler for the put todo operation
func NewPutTodo(ctx *middleware.Context, handler PutTodoHandler) *PutTodo {
	return &PutTodo{Context: ctx, Handler: handler}
}

/* PutTodo swagger:route PUT /todos/{todoID} app putTodo

App: Update a Todo information

*/
type PutTodo struct {
	Context *middleware.Context
	Handler PutTodoHandler
}

func (o *PutTodo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutTodoParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutTodoBody put todo body
//
// swagger:model PutTodoBody
type PutTodoBody struct {

	// todo body
	// Min Length: 1
	Body string `json:"body,omitempty"`

	// todo title
	// Min Length: 1
	Title string `json:"title,omitempty"`
}

// Validate validates this put todo body
func (o *PutTodoBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutTodoBody) validateBody(formats strfmt.Registry) error {
	if swag.IsZero(o.Body) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"body", "body", o.Body, 1); err != nil {
		return err
	}

	return nil
}

func (o *PutTodoBody) validateTitle(formats strfmt.Registry) error {
	if swag.IsZero(o.Title) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"title", "body", o.Title, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put todo body based on context it is used
func (o *PutTodoBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutTodoBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutTodoBody) UnmarshalBinary(b []byte) error {
	var res PutTodoBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
