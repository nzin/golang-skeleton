// Code generated by go-swagger; DO NOT EDIT.

package app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateTodoHandlerFunc turns a function with the right signature into a create todo handler
type CreateTodoHandlerFunc func(CreateTodoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateTodoHandlerFunc) Handle(params CreateTodoParams) middleware.Responder {
	return fn(params)
}

// CreateTodoHandler interface for that can handle valid create todo params
type CreateTodoHandler interface {
	Handle(CreateTodoParams) middleware.Responder
}

// NewCreateTodo creates a new http.Handler for the create todo operation
func NewCreateTodo(ctx *middleware.Context, handler CreateTodoHandler) *CreateTodo {
	return &CreateTodo{Context: ctx, Handler: handler}
}

/* CreateTodo swagger:route POST /todos app createTodo

App: Create a todo

*/
type CreateTodo struct {
	Context *middleware.Context
	Handler CreateTodoHandler
}

func (o *CreateTodo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateTodoParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateTodoBody create todo body
//
// swagger:model CreateTodoBody
type CreateTodoBody struct {

	// todo body
	// Min Length: 1
	Body string `json:"body,omitempty"`

	// todo title
	// Min Length: 1
	Title string `json:"title,omitempty"`
}

// Validate validates this create todo body
func (o *CreateTodoBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateTodoBody) validateBody(formats strfmt.Registry) error {
	if swag.IsZero(o.Body) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"body", "body", o.Body, 1); err != nil {
		return err
	}

	return nil
}

func (o *CreateTodoBody) validateTitle(formats strfmt.Registry) error {
	if swag.IsZero(o.Title) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"title", "body", o.Title, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create todo body based on context it is used
func (o *CreateTodoBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateTodoBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateTodoBody) UnmarshalBinary(b []byte) error {
	var res CreateTodoBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateTodoOKBody create todo o k body
//
// swagger:model CreateTodoOKBody
type CreateTodoOKBody struct {

	// todo ID
	TodoID int64 `json:"todoID,omitempty"`
}

// Validate validates this create todo o k body
func (o *CreateTodoOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create todo o k body based on context it is used
func (o *CreateTodoOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateTodoOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateTodoOKBody) UnmarshalBinary(b []byte) error {
	var res CreateTodoOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
